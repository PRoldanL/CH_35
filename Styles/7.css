    :root {
       
        /* Enfoque de diseño basado en sistemas para establecer reglas y patrones escalables y reutilizables.
        Se personalizan variables para acceder a cualquier valor de una propiedad mediante la pseudoclase ":root" con la sintaxis --nombre-variable */
    /* --nombre-variable */

        --font-primary: 'Poppins', sans-serif;
        --color-primary: #A60311;
        --color-secondary: #D9042B;
        --color-text-primary: #D9CCB4;
        --color-text-secondary: #D98E04;
        --color-background: #590219;
        --color-light: #F2F2F2;
        --color-dark: #070C26;
    }
body{
background-color: var(--color-background);
color: var(--color-light);
font-family: var(--font-primary);
}

.position{
    width:100px;
    height:100px;
    background-color: var(--color-dark);

}

 /* static es la posicioón por default, del html, no se afecta por ningun margen top, bottom, left, right */

#static{
    position: static;
    top: 20px;  
    bottom:20px;
    background-color: var(--color-text-secondary);
}

#relative{

    /* Es posicionado de forma relativa al elemento anterior o posición original y sí permite movimiento mediante propiedades top, bottom, left, right */

    position:relative;
   /* -son para demostrar que no cambia al midificarse       el    top o left. */
    top: 5000px;  
    left:200px; 
    background-color: var(--color-primary);

}
/* Se posisciona de forma relativa a su ancestro más cercano y no con respecto al viewport */

#absolute{

    position:absolute;
    top: 400px;
    left:250px; 
    background-color: var(--color-light);
    color: var(--color-dark);
}

 /* --Este será el ancestro sobre el cual  */
 
 #ancestro{
    width: 100px;
    height: 100px;
    background-color: var(--color-dark);
    border: solid var(--color-light) 1px;

  }

  /* Nos permite mantener el elemento de manera fija en el viewport */

  /* #fixed{
    left: 350px;
    top: 500px;
    position: fixed;
    background-color: cadetblue; 

  }*/

  #chat{

        /* border: solid var(--color-light); */

    position: fixed;
    top: 550px;
    left: 400px;
    width: 60px;
    height: 60px;

  }

  #Whatsapp-icon{
width: 100%;    
}

.display-inline {
    width: 100px;
    height: 100px;
    background-color: var(--color-text-primary);
    color: var(--color-dark);
    text-align: center;
    margin: 2px;
}

#display-1, #display-2 {
    display: inline;
}

.display-block {

    display: inline-block;

        width: 100px;
        height: 100px;
        background-color: var(--color-secondary);
        text-align: center;
        margin: 2px;
}
@media(max-width:720px){

    
.display-none {

    display: none;
    }
}

    /* Display flex. Me permite trabajar de manera flexible con elementos anidados dentro de un ancestro. El flexbox se aplica en el container y tiene efecto sobre los hijos.
    Por default, la dirección de flex es en filas (row).
    Vamos a poder acceder a diversas propiedades para modificar el comportamiento de los elementos.
    
    > - flex-direction: column, column-reverse, row, row-reverse 
    > - flex-wrap: wrap, nowrap, wrap-reverse 
    > - justify-content: center, flex-start, flex-end, flex-between, space-arround 
    > - aling-item: start, end, center 
    > - aling-self: flex-start, flex-end  */

.container{
    display:flex;
    flex-direction: row;   
    /* flex-direction: column-reverse; */
    flex-wrap:wrap;
    justify-content: space-around;
    /* align-items: center; */

    width: auto;
    height: 350px;
    margin: 10px;
    border-radius: 10px;
    padding: 15px;
    background-color: var(--color-text-secondary);

}

.display-flex{
    
    width: 100px;
    height: 80px;
    margin: 5px;
    border-radius: 6px;
    padding: 2px;
    text-align: center;
    background-color: var(--color-background);
}

#item-6{
    align-self: center;
    
}

a{
text-decoration: none;
color: var(--color-light);
}

/* Grid layout
Elemento de una cuadricula grid: contenedor, items, celdas, areas display: gird; */ 

.grid{
    display: grid;
    grid-template-columns: 1fr;
    gap: 20px;
    
    padding: 10px;
}   

 .display-grid{

    background-color: var(--color-text-secondary);
    border-radius: 3px;
    padding: 20px;
    text-align: center;
    border: solid var(--color-text-primary) 1px;
 }

 .container-1 {
    width: auto;
    height: 500px;
    border: solid var(--color-text-primary) 0.7px;
    text-align: center;
    margin: 10px;
    font-size: 18px;
}

header {
    background-color:darkviolet;
}

nav {
    background-color:darkslategray;
}

aside {
    background-color: seagreen;
}

section {
    background-color: peru;
}

article {
    background-color: tomato;
}

footer {
    background-color: deepskyblue;
}